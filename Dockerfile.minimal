# ====== STAGE 1: BUILDER ======
FROM python:3.12-slim AS builder

# Install build dependencies ONLY
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast builds
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/

WORKDIR /build

# Copy minimal dependency files
COPY pyproject.docker.toml pyproject.toml
COPY uv.lock ./

# Install runtime dependencies ONLY (no dev group, no optional deps)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev --no-optional

# Install Patchright browsers
RUN uv run patchright install chromium

# Pre-compile Python bytecode for faster startup
RUN python -m compileall /build/.venv

# ====== STAGE 2: MINIMAL RUNTIME DEPS ======
FROM python:3.12-slim AS runtime-deps

# Install ONLY essential system dependencies for browser automation
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    # Essential dependencies for Chromium
    libnss3 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# ====== STAGE 3: RUNTIME ======
FROM runtime-deps AS runtime

# Create non-root user with minimal setup
RUN useradd -m -u 1000 mcpuser

WORKDIR /app

# Copy Python environment from builder
COPY --from=builder --chown=mcpuser:mcpuser /build/.venv /app/.venv

# Copy Patchright browser installation from builder
COPY --from=builder --chown=mcpuser:mcpuser /root/.cache/ms-playwright /home/mcpuser/.cache/ms-playwright

# Copy ONLY essential application code
COPY --chown=mcpuser:mcpuser linkedin_mcp_server /app/linkedin_mcp_server
COPY --chown=mcpuser:mcpuser pyproject.toml /app/
COPY --chown=mcpuser:mcpuser docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh

# Switch to non-root user
USER mcpuser

# Environment configuration
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Patchright configuration
    PATCHRIGHT_SKIP_BROWSER_DOWNLOAD=0 \
    # Docker runtime flag
    DOCKER_RUNTIME=1 \
    # Optimize Python
    PYTHONOPTIMIZE=2 \
    # Configure keyring for Docker
    PYTHON_KEYRING_BACKEND=keyrings.alt.file.PlaintextKeyring \
    # Set keyring directory
    XDG_DATA_HOME=/home/mcpuser/.local/share

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import linkedin_mcp_server; print('OK')" || exit 1

# Entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD []
